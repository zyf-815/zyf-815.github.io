<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zyf-815.github.io</id>
    <title>Gridea</title>
    <updated>2025-03-12T11:47:30.705Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zyf-815.github.io"/>
    <link rel="self" href="https://zyf-815.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://zyf-815.github.io/images/avatar.png</logo>
    <icon>https://zyf-815.github.io/favicon.ico</icon>
    <rights>All rights reserved 2025, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[MoE（Mixture of Experts）]]></title>
        <id>https://zyf-815.github.io/post/moemixture-of-experts/</id>
        <link href="https://zyf-815.github.io/post/moemixture-of-experts/">
        </link>
        <updated>2025-03-04T09:01:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="概述">概述</h1>
<p>在大语言模型中，利用MoE层代替过去的FFN层，MoE层由多个FFN（专家）以及门控网络组成。其基本思想是利用不同的专家处理不同的输入数据。MoE的利用不仅扩大了模型规模同时能够利用更少的计算量实现更高的效果。MoE包括密集MoE和稀疏MoE（如下图所示），目前最广为使用的为稀疏MoE，对于稀疏MoE，模型往往选择topK个专家进行激活，但容易在训练过程中导致负载均衡问题，即部分专家被频繁激活而部分专家得不到训练，为了解决这一问题，往往会设计辅助损失使专家均衡了处理一个batch中的token（分配给专家i的token比例乘以分配给专家i的门控概率的比例）<br>
<img src="https://zyf-815.github.io/post-images/1741079319394.png" alt="" loading="lazy"></p>
<h1 id="门控函数">门控函数</h1>
<p>本章主要介绍了三种门控，包括稀疏门控，密集门控和soft门控。密集门控为每个输入过程激活所有专家。</p>
<p>对于稀疏门控，包括1. Token-Choice Gating，如下图(a)所示，为每个token选择topK个专家进行激活。对于token-choice方法，需要考虑负载均衡问题，除了概述中提出的辅助损失函数（有的工作发现，这一损失无法适应大尺度的值，因此提出了一个惩罚项以减少大 logits），专家重要性损失（通过权重表示专家的重要性，该损失要求所有专家拥有相同的重要性），以及互信息损失（计算专家与token之间的互信息）。除了通过损失函数的方式，有的工作通过设计专家容量实现负载均衡，即对于超过的容量的token根据门控激活值随机选择专家。为了防止后面的token由于超出容量被抛弃，Batch Prioritized Routing (BPR)技术通过对门控分数进行排序以分配专家而不是顺序的选择。下图(b,e)介绍了其他的一些token-choice门控方法以解决负载均衡问题，(b)将token分配定义为线性分配问题，目标是最大化token与专家之间的亲和度，同时确保每个专家的负载均衡（线性规划/匈牙利算法）。(e)通过引入注意力来更好的捕获专家与token之间的关系。2. 不训练的Token-Choice Gating，这种方法不需要额外的门控参数，同时能够通过一定的策略实现负载均衡。例如通过哈希的方法随机分配专家；或是将不同的专家分配到离散的预训练领域，并使用域匹配来选择与训练输入相对应的专家；或是如下图(c)所示，将标记路由到特定领域的专家组，然后在该组中进行随机选择。这种不训练的门控选择策略往往还被用于多任务中以解决通才模型中任务干扰的问题。3. Expert-Choice Gating。专家选择的门控属于上述的逆版本，即每个专家选择他们将处理的前k个令牌，如下图(d)，这一方法避免了训练期间辅助负载平衡损失的必要性，确保了专家之间令牌的均匀分布。但容易导致有些令牌可能被多个专家处理，或者根本不处理，但这可能也是优点，即模型可以隐式地对某些标记应用更多的计算。</p>
<p>对于soft的门控，同样激活了所有的专家，但区别于密集门控，soft门控利用合并专家或是token的方法减少了计算需求，token合并的方法，为所有token聚合了几个加权求和的值，并为每个聚合分配相应的专家进行处理。然而，合并输入标记使其在自回归解码器中的应用变得复杂，因为在推理过程中无法访问平均的未来标记。下图(f)展示了专家合并的方法，通过加权平均合并所有专家的参数来规避离散门控。<br>
<img src="https://zyf-815.github.io/post-images/1741164659514.png" alt="" loading="lazy"></p>
<h1 id="专家">专家</h1>
<p>在MoE中，MoE层往往替代网络中的FFN网络，这是基于自注意力层比 FFN 层表现出更低的稀疏性和更少的域特异性，即大多数输入只激活一小部分FFN神经元，突出了FFN的固有稀疏性。并且部分工作的发现揭示了神经元激活和特定任务之间的显着相关性。同时也有部分工作改进了MoE中的专家架构，如下图(a)MoA，用Attention代替了FFN，MoA包含了两组专家，一组用于计算Query，一组用于计算Key和Value，并通过公共门控网络选择具有相同索引的专家。(b)展示了共享专家的思想，这类方法的主要思想是将稀疏MoE视作固定密集FFN的误差校正附件。<br>
<img src="https://zyf-815.github.io/post-images/1741592052230.png" alt="" loading="lazy"></p>
<p>超参数的选择，关键的超参数包括了专家数量，专家大小以及MoE层的替换频率。对于<strong>专家数量</strong>，早期的工作设计了上千的专家数量，但在领域迁移以及微调任务时，模型退化严重。实验结果发现64个专家并且选择top2的专家在效率与效果上取得了最好的平衡。金字塔结构的专家数量往往在网络的末尾设计较多的专家数量。<strong>专家网络的参数大小</strong>，目前工作往往在专家数量与参数大小上进行权衡，通过增加专家数量并增加激活的专家数以减少单个专家的参数两，这种设计认为可以改进专家之间知识的分解，促进了更精确的学习，而且还增强了专家激活组合的灵活性，允许更专业和有针对性的知识捕获。<strong>MoE层频率</strong>，目前的研究没有明确的表明MoE与FFN最佳的替换方法。</p>
<h1 id="参数高效的专家混合模型">参数高效的专家混合模型</h1>
<p>将大模型应用到下游任务的过程中，全参数微调的方法计算开销大，而PEFT（参数高效微调）方法只更新一小组参数，同时保持基本模型的其余部分不变。但由于可训练参数的范围有限和灾难性遗忘的潜力，PEFT 方法通常难以跨多个任务进行泛化。借助MoE和PEFT的方法，结合MoE在多任务场景上的泛化能力以及PEFT的微调效率。基于其在 Transformer 模型架构中的位置，模型分为如下图四类：</p>
<ol>
<li>FFN层，重点是优化参数高效的专家和门控机制并保持其他部分网络冻结。计算公式如下，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi><msubsup><mi>W</mi><mi>i</mi><mrow><mi>f</mi><mi>f</mi><mi>n</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">\Delta W_i^{ffn}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2438799999999999em;vertical-align:-0.276864em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9670159999999999em;"><span style="top:-2.4231360000000004em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span></span></span></span>表示专家参数，$G^{ffn}(x')_i $表示门控函数。LoRAMoE 将LoRA专家集成到FFN层，并使用门控机制来表示专家的贡献，除此之外，其将专家分为两组，一组专注于学习各种下游任务，另一组用于保留学习到的通用知识并设计了一种平衡损失，用以解决知识遗忘问题。另外的方法将模型设计为两阶段的训练方法，第一阶段仅微调与FFN并行的域Adapter以获得特定领域的知识，同时保留世界知识。第二阶段， 在 FFN 层之上引入门控网络和任务Adapter，以根据特定的下游任务定制模型。</li>
</ol>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>F</mi><msup><mi>N</mi><mrow><mi>M</mi><mi>o</mi><mi>E</mi></mrow></msup><mo>(</mo><msup><mi>x</mi><mo mathvariant="normal">′</mo></msup><mo>)</mo><mo>=</mo><mi>F</mi><mi>F</mi><mi>N</mi><mo>(</mo><msup><mi>x</mi><mo mathvariant="normal">′</mo></msup><mo>)</mo><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>x</mi><mo mathvariant="normal">′</mo></msup><mi mathvariant="normal">Δ</mi><msubsup><mi>W</mi><mi>i</mi><mrow><mi>f</mi><mi>f</mi><mi>n</mi></mrow></msubsup><mo>⋅</mo><msup><mi>G</mi><mrow><mi>f</mi><mi>f</mi><mi>n</mi></mrow></msup><mo>(</mo><msup><mi>x</mi><mo mathvariant="normal">′</mo></msup><msub><mo>)</mo><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">FFN^{MoE}(x&#x27;) = FFN(x&#x27;) + \sum _{i=1}^{n} x&#x27; \Delta W_i^{ffn} \cdot G^{ffn}(x&#x27;)_i 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9670159999999998em;"><span style="top:-2.4231360000000004em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.180908em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<ol start="2">
<li>Attention层，通过合并门控网络和一组并行专家来增强注意力机制。可以应用于查询、键、值和输出投影模块。可以单独增强也可以组合使用，公表示如下所示。在Attention上的MoPE可以分为两类，第一类如MoELoRA 将多个 LoRA 专家设置为注意力机制的 Query 和 Value 矩阵，并利用门控网络在训练和推理阶段激活与特定任务相关的前 k 个专家。为了保证每个专家学习不同的特征，通过对比学习突出专家之间输出分布的差异，从而鼓励它们捕获与下游任务相关的不同特征。第二类方法如MoCLE利用聚类方法将任务分为多类。然后将不同任务分配给不同任务的专家模型，除此之外还有一个通用专家以保持模型的通用性能。</li>
</ol>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><msup><mi>A</mi><mrow><mi>M</mi><mi>o</mi><mi>E</mi></mrow></msup><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mi>S</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mo>(</mo><mfrac><mrow><mi>Q</mi><mo>(</mo><msup><mi>K</mi><mi>T</mi></msup><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>x</mi><mi mathvariant="normal">Δ</mi><msubsup><mi>W</mi><mi>i</mi><mi>k</mi></msubsup><mo>⋅</mo><msup><mi>G</mi><mi>k</mi></msup><mo>(</mo><mi>x</mi><msub><mo>)</mo><mi>i</mi></msub><mo>)</mo><mo>)</mo></mrow><msqrt><msub><mi>d</mi><mrow><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></msqrt></mfrac><mo>)</mo><mo>(</mo><mi>V</mi><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>x</mi><mi mathvariant="normal">Δ</mi><msubsup><mi>W</mi><mi>i</mi><mi>v</mi></msubsup><mo>⋅</mo><msup><mi>G</mi><mi>v</mi></msup><mo>(</mo><mi>x</mi><msub><mo>)</mo><mi>i</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">SA^{MoE}(x) = Softmax(\frac{Q(K^T + \sum _{i=1}^{n} x \Delta W_i^{k} \cdot G^{k}(x)_i ))}{\sqrt{d_{head}}})(V+\sum _{i=1}^{n} x \Delta W_i^{v} \cdot G^{v}(x)_i )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.468818em;vertical-align:-0.93em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.538818em;"><span style="top:-2.25278em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.81722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.18278000000000005em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6897100000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-2.441336em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<ol start="3">
<li>Transformer Block，同时在FFN层以及Attention层利用了MoE</li>
<li>every layer，将整个Transformer视作一个整体<br>
<img src="https://zyf-815.github.io/post-images/1741597789700.png" alt="" loading="lazy"></li>
</ol>
<h1 id="训练与推理方案">训练与推理方案</h1>
<p>下图展示了四种MoE训练与推理架构，原始架构构建了一个MoE模型并从头开始训练它。为了提升模型的训练效率与质量，目前共有三种变体：</p>
<ol>
<li>Dense-to-Sparse：先训练密集MoE在到稀疏MoE，(a)首先对所有专家密集激活，然后逐步自适应地将令牌路由到减少数量的专家。(b)复制FFN层初始化所有专家，然后仅仅训练MoE层而忽略其他模块。</li>
<li>Sparse-to-Dense：目的是将大型的MoE模型蒸馏到密集模型，以在保留性能的基础上减少参数量。一种方案是利用蒸馏的方法学习一个密集的学生模型，另一种方案通过移除任务无关的专家或是合并专家进而使模型变为密集模型。</li>
<li>Expert Models Merging：Branch-Train-Merge策略独立训练一组专家 LM (ELM)，每个专家 LM 都针对训练语料库中的特定领域量身定制，这些在没有共享参数的情况下运行的ELM可以在推理时集成或参数平均，以合并成一个模型。或是再引入一个门控函数选择激活的专家，而其他参数通过平均的方式进行合并。<br>
<img src="https://zyf-815.github.io/post-images/1741766502393.png" alt="" loading="lazy"></li>
</ol>
<h1 id="系统设计">系统设计</h1>
<p>下图展示了四种并行策略，(a)着重展示了专家并行的策略，即MoE层中的每个专家都被分配到不同的设备而不是和其他模块一样跨设备复制。专家并行主要有以下流程：门路由、输入编码、All-toAll调度、专家计算、All-to-All 组合和输出解码。输入编码用于将同一专家的输入标记聚合到连续的内存空间中，由来自门路由的令牌-专家映射确定。随后，All-to-All调度用于将输入标记发送到分布式设备中的相应专家。随后进行专家局部计算，最后执行之前的逆过程，All-to-All 组合和输出解码，根据门控索引重塑原始数据分布。(b,c,d)分别展示了张量并行、pipline并行的引入。<br>
<img src="https://zyf-815.github.io/post-images/1741768781078.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vision Mamba相关论文]]></title>
        <id>https://zyf-815.github.io/post/mamba-xiang-guan-lun-wen/</id>
        <link href="https://zyf-815.github.io/post/mamba-xiang-guan-lun-wen/">
        </link>
        <updated>2025-02-28T06:38:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="vision-mamba的发展">Vision Mamba的发展</h1>
<p>对于CNN和Transformer，Mamba具有全局感受野且属于线性复杂度。但是，Mamba的任务在视觉任务中存在以下问题：</p>
<ol>
<li>伪影，论文Mamba-r: Vision Mamba ALSO Needs Registers发现Mamba存在与Transformer一样的伪影问题，即背景token得到了较大的激活值且包含了全局信号，影响了特征的传播。</li>
<li>在全局与局部建模的局限性，原始Mamba的单方向的扫描机制会适合因果信号，但是视觉输入属于非因果信号，限制了全局与局部信号的表达</li>
</ol>
<h2 id="解决伪影问题mamba-r-vision-mamba-also-needs-registers">解决伪影问题：Mamba-r: Vision Mamba ALSO Needs Registers</h2>
<p>如下左图所示，ViM中的背景token具有较大的激活值，导致模型无法显著区分前景与背景影响特征的传播。一些基于Transformer的相关论文发现，使用注册方法（引入额外的输入无关的token）能够显著减少伪影。基于此，文章为Mamba提出了注册方法。与Transformer不同在于：1.Transformer通常在一侧引入注册token，考虑到Mamba扫描的方向性，文章采用均匀插入的方法，使模型能够学习不同位置的感兴趣区域。2. 文章发现注册token能够有效的表达全局范围的特征，因此加以利用注册token<br>
<img src="https://zyf-815.github.io/post-images/1740732738928.png" alt="" loading="lazy"></p>
<h2 id="解决全局与局部建模限制是模型适应非因果数据">解决全局与局部建模限制（是模型适应非因果数据）</h2>
<h3 id="改进扫描策略">改进扫描策略</h3>
<p>常见的扫描方法如下图所示，包括了sweeping scan, continues scan以及local scan。continues解决了sweeping方法导致的token不连续的问题，local的方法增强了局部建模能力。除了这些方法之外，EfficientVMamba参考了空洞卷积的思想设计了空洞扫描策略（跳跃式的扫描）。这些扫描方式通过引入不同的扫描方向以减弱SSM的因果属性，但这些方法都属于人工设计，缺少了针对输入数据的灵活性。Spatial-Mamba: Effective Visual State Space Models via Structure-Aware State Fusion通过在扫描后引入扩张卷积使模型能够学习空间对应关系，但是文章依然基于SSD的顺序扫描方法。DAMamba: Vision State Space Model with Dynamic Adaptive Scan更进一步，参考可变形注意力的方法，学习感兴趣的位置以调整token的位置，使扫描变得依赖于输入数据。除此之外，HI-MAMBA: HIERARCHICAL MAMBA FOR EFFICIENTIMAGE SUPER-RESOLUTION在扫描中引入了多尺度的方法，local流即原来的SSD和region流通过池化层缩小空间尺度后进行SSD。该方法本质上还是增强了局部建模。<br>
<img src="https://zyf-815.github.io/post-images/1740733417715.png" alt="" loading="lazy"><br>
<img src="https://zyf-815.github.io/post-images/1740734022404.png" alt="" loading="lazy"></p>
<h3 id="引入额外的分支">引入额外的分支</h3>
<p>Deformable Mamba for Wide Field of View Segmentation &amp; Deform-Mamba Network for MRI Super-Resolution在Mamba网络的基础上引入了一个额外的分支，即对特征图应用可变形卷积，目的在于增强网络的局部建模能力。A Lightweight and Effective Image Tampering Localization Network with Vision Mamba同样引入了一个额外的分支，不过本文引入的分支属于任务相关的分支，即利用预训练的网络提取对任务有帮助的特征。除此之外，本文为了保证计算的高效性选择在decoder处而不是encoder进行融合，并且设计轻量化的decoder（线性层与上采样）</p>
<h2 id="mamba高效化">Mamba高效化</h2>
<p>HI-MAMBA: HIERARCHICAL MAMBA FOR EFFICIENTIMAGE SUPER-RESOLUTION发现过去利用扫描策略的方法导致计算复杂度上升（多方向），基于此文章采用级联的方式轮流选择不同的扫描策略，减少计算复杂度。Famba-V: Fast Vision Mamba with Cross-Layer Token Fusion：通过融合token实现高效计算，根据输入标记序列的偶数和奇数索引将输入标记序列分为两组，然后通过余弦相似度查找相似度最高的r组进行融合，考虑到融合导致的信息丢失，同时文章提出了三种融合策略（交替融合、浅层融合、深层融合）EfficientViM: Efficient Vision Mamba with Hidden State Mixer based State Space Duality：修改了Mamba的计算过程，将特征传播过程转移到了隐藏状态</p>
<h2 id="其他改进">其他改进</h2>
<p>PlainMamba: Improving Non-Hierarchical Mamba in Visual Recognition：提出了一个简单模型，即保持了空间维度的不变（优点：简单，复用性强）。除此之外，引入了五个可学习的token表示方向（上下左右以及begin）使模型能够更好的处理空间关系</p>
<h2 id="多模态mamba">多模态Mamba</h2>
<ol>
<li>Pan-Mamba: Effective pan-sharpening with State Space Model &amp; MambaDFuse: A Mamba-based Dual-phase Model for Multi-modality Image Fusion &amp; CFMW: Cross-modality Fusion Mamba for Multispectral Object Detection under Adverse Weather Conditions三篇论文提出了基本相同的多模态融合方式，通过主模态的计算gate控制不同模态的SSM结果最后相加融合不同模态的特征，这些方法除了利用Mamba进行融合，文章还利用通道交换实现特征交互。<br>
<img src="https://zyf-815.github.io/post-images/1740734931687.png" alt="" loading="lazy"></li>
<li>Coupled Mamba: Enhanced Multi-modal Fusion with Coupled State Space Model：多模态融合的本质在于利用不同模态固有的互补信息，与之前论文不同是本文在SSM传播的过程中进行特征融合，即当前状态取决于其自身链的状态和前一个时间步的相邻链的状态。优势：即保留了特征传播的独立性同时保证了模态交互<br>
<img src="https://zyf-815.github.io/post-images/1740735249267.png" alt="" loading="lazy"></li>
<li>ML-Mamba: Efficient Multi-Modal Large Language Model Utilizing Mamba-2 &amp; Cobra: Extending Mamba to Multi-Modal Large Language Model for Efficient Inference 利用Mamba代替Transformer实现大模型的训练<br>
<img src="https://zyf-815.github.io/post-images/1740735309432.png" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[扩散模型相关]]></title>
        <id>https://zyf-815.github.io/post/kuo-san-mo-xing-xiang-guan/</id>
        <link href="https://zyf-815.github.io/post/kuo-san-mo-xing-xiang-guan/">
        </link>
        <updated>2025-01-20T00:17:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="可控生成-与-inpainting">可控生成 与 inpainting</h1>
<h2 id="a-task-is-worth-one-word-learning-with-task-prompts-for-high-quality-versatile-image-inpainting">A Task is Worth One Word: Learning with Task Prompts for High-Quality Versatile Image Inpainting</h2>
<p>impainting既需要生成与文本匹配的内容，也需要符合背景。除此之外，impainting包含多种任务，如物体生成与删除。为了解决这些问题解决方法：设计了四种文本提示：</p>
<ol>
<li>文本提示 ：学习文本信息，训练过程中在mask区域生成物体</li>
<li>上下文内容提示：学习上下文信号，训练过程根据上下文中填充mask区域</li>
<li>文本与上下文平衡提示：文章发现过去的物体删除容易导致模型从上下文中复制粘贴而不是简单的删除物体，因此模型同时引入文本提示与上下文内容提示，要求模型进行权衡，既考虑物体的信息，也考虑上下文信息。</li>
<li>形状提示：输入mask的精细程度对生成的影响较大，为了提示鲁棒性。要求模型在mask和上下文之间进行权衡，如果mask较为粗糙，需要考虑上下文；如果mask较为精细，尽可能考虑形状。<br>
<img src="https://zyf-815.github.io/post-images/1737355153175.png" alt="" loading="lazy"></li>
</ol>
<h2 id="attentive-eraser-unleashing-diffusion-models-object-removal-potential-via-self-attention-redirection-guidance">Attentive Eraser: Unleashing Diffusion Model’s Object Removal Potential via Self-Attention Redirection Guidance</h2>
<p>一种无需微调的内容移除扩散模型，为了解决这一问题，文章提出了两种策略：1. 注意力激活与抑制，增强模型前景对背景的注意力同时抑制前景对自身的注意力（使前景融于背景）以及背景对前景的注意力（保持背景不变）。为了防止模型对相似物体的依赖性提出了相似性抑制（防止模型对背景中相似内容进行复制，主要是通过降低相似性矩阵的方差进行实现）。2. 自注意力重定向引导，将由上述方案处理后的去噪网络看作是噪声预测的扰动，通过扰动引导采样过程，感觉类似于残差的设计。<br>
<img src="https://zyf-815.github.io/post-images/1741055370442.jpeg" alt="" loading="lazy"></p>
<h2 id="zone-zero-shot-instruction-guided-local-editing">ZONE: Zero-Shot Instruction-Guided Local Editing</h2>
<p>模型根据指令输入选择编辑区域并实现inpainting，具体流程：</p>
<ol>
<li>获取编辑区域：文章发现指令引导的注意力机制会迫使注意力图共享相似的空间特征，表现出对编辑的感知特征。因此，作者利用InstructPix2Pix去噪模型的注意力图生成大致的编辑区域定位。</li>
<li>利用现成的模型提取准确的分割区域，利用SAM根据第一阶段获取的区域生成细致的掩码，由于SAM会生成多个掩码，计算IOU选择最合适的。</li>
<li>利用 FFT实现图层的融合。<br>
<img src="https://zyf-815.github.io/post-images/1737360559543.png" alt="" loading="lazy"></li>
</ol>
<h2 id="smartmask-context-aware-high-fidelity-mask-generation-for-fine-grained-object-insertion-and-layout-control">SmartMask: Context Aware High-Fidelity Mask Generation for Fine-grained Object Insertion and Layout Control</h2>
<p>文章主要解决如何针对粗糙的掩码进行 ipainting，既要生成对应文本的形状，也要保证背景一致，文章提出的方法还能够在不使用掩码的情况下在合适的地方生成图像。解决方法：通过语义分割将场景分为不同的图层，在训练过程中将一个图层作为预测。<br>
<img src="https://zyf-815.github.io/post-images/1737347327165.png" alt="" loading="lazy"></p>
<h2 id="smartbrush-text-and-shape-guided-object-inpainting-with-difiusion-model">Smartbrush: Text and shape guided object inpainting with difiusion model</h2>
<p>过去的方法不能生成和精细的掩码相匹配的物体；且对于粗糙的掩码，不能生成与背景匹配的图像。基于此问题，文章提出：1. 只在图像的 mask 区域添加噪声 2. 对掩码区域设置不同程度的高斯模糊，即得到一系列不同程度的掩码 3. 输出图像时同时生成掩码<br>
<img src="https://zyf-815.github.io/post-images/1737347596265.png" alt="" loading="lazy"></p>
<h2 id="migcmulti-instance-generation-controller-for-text-to-image-synthesis">MIGC:Multi-Instance Generation Controller for Text-to-Image Synthesis</h2>
<p>多实例生成，过去的多实例生成往往伴随着实例缺失，属性错误的问题，主要是因为 cross attention 步骤中的泄漏，本文利用分而治之的思想解决这一问题。即分别为每个实例单独生成，最后融合。<br>
<img src="https://zyf-815.github.io/post-images/1737346863193.png" alt="" loading="lazy"></p>
<h2 id="avid-any-length-video-inpainting-with-diffusion-mode">AVID: Any-Length Video Inpainting with Diffusion Mode</h2>
<p>给定一个视频以及第一帧的掩码，根据prompt 进行impainting。文章提出的方法针对以下三个问题1.时间一致性 2. 不同结构的 paint 3. 不同时长的视频序列 提出解决方案。<br>
<img src="https://zyf-815.github.io/post-images/1737347055706.png" alt="" loading="lazy"></p>
<h1 id="数据集补充">数据集补充</h1>
<h2 id="pose-augmentation-class-agnostic-object-pose-transformation-for-object-recognition">Pose Augmentation: Class-Agnostic Object Pose Transformation for Object Recognition</h2>
<p>对于分类任务，不同的视角与姿态对于检测结果的影响较大。文章利用类不可知的方法（将物体特征进行解耦，分为类别特征与姿态特征）为每个物体生成不同姿态的图像（偏航角与俯仰角）</p>
<h2 id="lake-red-camouflaged-images-generation-by-latent-background-knowledge-retrieval-augmented-diffusion">LAKE-RED: Camouflaged Images Generation by Latent Background Knowledge Retrieval-Augmented Diffusion</h2>
<p>伪装物体和背景的纹理类似，因此可以利用前景以生成背景<br>
<img src="https://zyf-815.github.io/post-images/1737337320269.png" alt="" loading="lazy"></p>
<h2 id="diffusemix-label-preserving-data-augmentation-with-diffusion-models">DIFFUSEMIX: Label-Preserving Data Augmentation with Diffusion Models</h2>
<p>之前的混合的增强方式可能忽略图像的重要部分或是引入歧义，本文利用扩散模型实现图像混合。<br>
<img src="https://zyf-815.github.io/post-images/1737337191407.png" alt="" loading="lazy"></p>
<h2 id="guiding-text-to-image-diffusion-model-towards-grounded-generation">Guiding Text-to-Image Diffusion Model Towards Grounded Generation</h2>
<p>利用扩散模型同时生成图片和掩码。得益于扩散模型的表达能力，只需要少量的{image,mask,text}三元组对就可以让模型拥有生成 mask 的能力<br>
<img src="https://zyf-815.github.io/post-images/1737336581344.png" alt="" loading="lazy"></p>
<h2 id="datasetdm-synthesizing-data-with-perception-annotations-using-diffusion-models">DatasetDM: Synthesizing Data with Perception Annotations Using Diffusion Models</h2>
<p>利用扩散模型同时生成图像和掩码，依据的原理：依靠扩散模型的优秀表达能够轻易训练解码器生成注释。<br>
<img src="https://zyf-815.github.io/post-images/1737336155036.png" alt="" loading="lazy"></p>
<h2 id="diffumask-synthesizing-images-with-pixel-level-annotations-for-semantic-segmentation-using-diffusion-models">DiffuMask: Synthesizing Images with Pixel-level Annotations for Semantic Segmentation Using Diffusion Models</h2>
<p>利用扩散模型同时生成图像和掩码，基于扩散模型的attentionmap，文本和图像的注意力图表示了实例的大致位置。<br>
<img src="https://zyf-815.github.io/post-images/1737336055107.png" alt="" loading="lazy"></p>
<h2 id="stablerep-synthetic-images-from-text-to-image-models-make-strong-visual-representation-learners">StableRep: Synthetic Images from Text-to-Image Models Make Strong Visual Representation Learners</h2>
<p>将生成图像应用于Clip的训练范式，同一文本生成的图像互为正样本进行训练作用，模型效果超过了真实数据集的训练结果。<br>
<img src="https://zyf-815.github.io/post-images/1737335927056.png" alt="" loading="lazy"></p>
<h2 id="dataset-enhancement-with-instance-level-augmentations">Dataset Enhancement with Instance-Level Augmentations</h2>
<p>应用任务：检测、分割。利用扩散模型实现实例级的重新生成，且保留原始的注释。流程为：根据图片和GT估计图像级别的深度和边缘映射。注释被分解为每个对象的二进制掩码和类，它们共同构成了修复模型的条件。我们使用按深度排序的 alpha 混合将它们重新绘制为最终图像。<br>
<img src="https://zyf-815.github.io/post-images/1737334883224.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[异常检测]]></title>
        <id>https://zyf-815.github.io/post/yi-chang-jian-ce/</id>
        <link href="https://zyf-815.github.io/post/yi-chang-jian-ce/">
        </link>
        <updated>2025-01-19T02:34:40.000Z</updated>
        <content type="html"><![CDATA[<h1 id="无监督的训练方式">无监督的训练方式</h1>
<p>训练集只包含了正常的场景，测试集包含异常场景。这类模型的追求在于，要求正常样本多样性，又要防止对异常样本的鲁棒性。即需要在二者之间达成平衡</p>
<h2 id="基于重构的方法">基于重构的方法</h2>
<h3 id="self-distilled-masked-auto-encoders-are-efficient-video-anomaly-detectors">Self-Distilled Masked Auto-Encoders are Efficient Video Anomaly Detectors</h3>
<ul>
<li>引入了一种基于运动梯度加权tokens的方法，出发点在于重构背景意义不大，主要重构运动的物体。<br>
将教师解码器和学生解码器集成到我们的架构中</li>
<li>为了解决异常样本与正常样本学习的平衡，文章提出了两种策略：1. 学生老师模型：老师模型具有较强的泛化能力，可能将部分异常样本归类为正常，因此，利用老师模型教导学生模型，减少学生模型的鲁棒性。2. 合成异常事件来增强训练，迫使模型在学习时忽略异常样本。即重构场景时，不重构异常。而额外引入了一个异常预测来分析异常<br>
<img src="https://zyf-815.github.io/post-images/1737271897224.png" alt="" loading="lazy"></li>
</ul>
<h3 id="synthetic-temporal-anomaly-guided-end-to-end-video-anomaly-detection">Synthetic Temporal Anomaly Guided End-to-End Video Anomaly Detection</h3>
<p>首次提出了利用生成异常的方法防止模型对异常的鲁棒性，文章发现视频的异常程度与速度紧密相关，因此通过跳帧的方法生成伪异常，在训练过程中，要求最小化正常样本的重构损失并最大化异常样本的重构损失。<br>
<img src="https://zyf-815.github.io/post-images/1737274116410.png" alt="" loading="lazy"></p>
<h3 id="multi-scale-video-anomaly-detection-by-multi-grained-spatio-temporal-representation-learning">Multi-Scale Video Anomaly Detection by Multi-Grained Spatio-Temporal Representation Learning</h3>
<p>主要解决问题：设计了三个任务使模型具有如下能力：1. 视频片段中是否有丢失帧，模型能够检测大规模的异常；2. 如果视频片段不连续，定位丢失帧，模型能够检测小规模异常；3. 如果视频片段不连续，丢失帧的特征是怎样的，分离异常特征与正常特征。相当于构造了异常<br>
<img src="https://zyf-815.github.io/post-images/1737278586441.png" alt="" loading="lazy"></p>
<h3 id="dynamic-local-aggregation-network-with-adaptive-clusterer-for-anomaly-detection">Dynamic Local Aggregation Network with Adaptive Clusterer for Anomaly Detection</h3>
<p>过去基于内存增强型AE的问题：1. 建立记忆库需要额外的内存空间 2. 固定数量的原型基于主观假设，忽略了数据特征的差异和多样性。因此，文章提出通过学习的方式聚合来自AE的高级特征，以获得更具代表性的原型，并且利用聚类的方式自适应的选择原型。<br>
<img src="https://zyf-815.github.io/post-images/1737274378176.png" alt="" loading="lazy"></p>
<h3 id="self-supervised-predictive-convolutional-attentive-block-for-anomaly-detection">Self-Supervised Predictive Convolutional Attentive Block for Anomaly Detection</h3>
<p>提出了一个适合异常检测的卷积模块，利用周围区域预测中间区域的像素值。<br>
<img src="https://zyf-815.github.io/post-images/1737277126535.png" alt="" loading="lazy"></p>
<h3 id="dynamic-distinction-learning-adaptive-pseudo-anomalies-for-video-anomaly-detection">Dynamic Distinction Learning: Adaptive Pseudo Anomalies for Video Anomaly Detection</h3>
<p>利用生成异常来减弱模型对异常的鲁棒性，异常的生成方式为为物体增加噪声，同时文章引入可学习的参数自适应的分配异常生成的比例。文章还提出了一个区分损失函数，要求模型能够从异常中恢复正常场景。<br>
<img src="https://zyf-815.github.io/post-images/1737276894382.png" alt="" loading="lazy"></p>
<h3 id="multimodal-motion-conditioned-diffusion-model-for-skeleton-based-video-anomaly-detection">Multimodal Motion Conditioned Diffusion Model for Skeleton-based Video Anomaly Detection</h3>
<p>利用扩散模型重构人物的骨骼（不扩散外观），因此需要一个额外的姿态估计网络。模型主要由两部分组成</p>
<ol>
<li>condition生成，利用AE的方式</li>
<li>扩散模型，通过随机平移骨骼的方式进行加噪<br>
<img src="https://zyf-815.github.io/post-images/1737275823973.png" alt="" loading="lazy"></li>
</ol>
<h3 id="feature-prediction-diffusion-model-for-video-anomaly-detection">Feature Prediction Diffusion Model for Video Anomaly Detection</h3>
<p>对于视频异常检测任务，既要考虑空间也要考虑时间。因此，文章设计了两个扩散模型，第一个扩散模型学习运动表示，第二个扩散模型将图像特征作为condition输入，生成外观良好的结果。<br>
<img src="https://zyf-815.github.io/post-images/1737275159531.png" alt="" loading="lazy"></p>
<h3 id="exploring-diffusion-models-for-unsupervised-video-anomaly-detection-和unsupervised-video-anomaly-detection-with-diffusion-models-conditioned-on-compact-motion-representations">Exploring Diffusion Models for Unsupervised Video Anomaly Detection 和Unsupervised Video Anomaly Detection with Diffusion Models Conditioned on Compact Motion Representations</h3>
<p>探索了扩散模型在异常检测中的应用，对于扩散模型，文章采取的方法是重构特征。两篇文章的区别在于前篇直接利用扩散模型进行重构，而第二篇额外加入了一个运动提取模块作为状态输入。</p>
<h2 id="基于预测下一帧的方法">基于预测下一帧的方法</h2>
<h3 id="a-new-comprehensive-benchmark-for-semi-supervised-video-anomaly-detection-and-anticipation">A New Comprehensive Benchmark for Semi-supervised Video Anomaly Detection and Anticipation</h3>
<p>提出了异常预测任务：根据当前帧与之前的帧，判断未来<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span>帧是否存在异常。模型包括一个前向和一个后向帧预测网络，前向网络基于观察到的帧一次性预测多个未来帧，而后向网络则根据前向网络生成的未来帧和部分观察到的帧逆向预测观察到的帧。动机：如果在前向预测中未来帧是异常的，那么预测的图像将不准确。当将不准确的图像作为后向帧预测模型的一部分输入时，输出帧与已观察到的地面真实帧之间也会有很大的误差。<br>
<img src="https://zyf-815.github.io/post-images/1737274590784.png" alt="" loading="lazy"></p>
<h3 id="video-anomaly-detection-with-spatio-temporal-dissociation">Video anomaly detection with spatio-temporal dissociation</h3>
<p>同时结合了重构与预测的方法，输入为一个视频片段，重构一个视频帧，预测视频片段的光流变化，最后得到最后一帧。即重构过程中充分考虑运动与外观。除此之外，文章提出了一个基于方差的注意力网络，即通过方差（可以表示物体的运动）分配权重。文章还提出了一个聚类模块促使模型学习紧凑的表示，目的在于使分离异常与正常样本。<br>
<img src="https://zyf-815.github.io/post-images/1737276356815.png" alt="" loading="lazy"></p>
<h3 id="a-hybrid-video-anomaly-detection-framework-via-memory-augmented-flow-reconstruction-and-flow-guided-frame-prediction">A Hybrid Video Anomaly Detection Framework via Memory-Augmented Flow Reconstruction and Flow-Guided Frame Prediction</h3>
<p>首先利用重构的方法生成光流，然后作为condition预测下一帧。<br>
<img src="https://zyf-815.github.io/post-images/1737277273287.png" alt="" loading="lazy"></p>
<h1 id="弱监督的训练方式">弱监督的训练方式</h1>
<p>只有视频级的标注，缺少帧级别的标注</p>
<h2 id="unbiased-multiple-instance-learning-for-weakly-supervised-video-anomaly-detection">Unbiased Multiple Instance Learning for Weakly Supervised Video Anomaly Detection</h2>
<p>过去的方法将样本分为了自信集（自信为异常或正常）和模糊集（不太确定为异常或是正常），并仅仅利用自信集进行训练，这导致模型存在部分异常偏见使其在一些边缘条件上不能很好的进行识别，具体来说如下图所示，(a)检测器对烟雾存在偏见，因为仅含有烟雾的爆炸前片段也被赋予了较大的异常分数；(b检测器对剧烈运动背景存在偏见，而对细微的破坏行为，即真正的异常，不太敏感。因此本文充分利用了模糊样本，利用聚类分开，然后缩小类内距离，增加类间距离以消除偏差。<br>
<img src="https://zyf-815.github.io/post-images/1737254640507.png" alt="" loading="lazy"><br>
传统的方法利用预训练的网络<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span>提取片段特征，然后将正常视频中最异常的片段（即y = 0）预测为正常，将异常视频中最异常的片段（即y = 1）预测为异常，即构造了一个由自信集构成的监督学习，然而，异常视频中的部分片段并没有被利用，这导致模型不能准确的学习真正的异常分布，导致模型容易对异常产生偏见。本文的方法：</p>
<ol>
<li>构建自信集与模糊集，基于的假设为：对于明显的正常或异常片段，它们的预测往往会随着时间的推移迅速收敛到具有小预测方差的正常或异常。基于此，将训练集分为模糊集和自信集，对于自信集利用监督信号进行学习，而对于模糊集，利用无监督的方式进行区分。</li>
<li>对于模糊集，通过特征分布可以反映正常和异常片段之间的内在差异，因此模型通过聚类生成伪标签，在训练过程中，要求相似特征（聚类为一类）对应的的预测相似<br>
<img src="https://zyf-815.github.io/post-images/1737270305704.png" alt="" loading="lazy"><br>
额外介绍bias和Variance：bias表示偏见，即模型预测是否准确，一般来说模型越简单bias越大，模型越复杂bias越小；variance表示方差，即模型预测之间的方差，一般来说模型越复杂，variance越大；一般来说模型越简单，variance越小。</li>
</ol>
<h2 id="delving-into-clip-latent-space-for-video-anomaly-recognition">Delving into CLIP latent space for Video Anomaly Recognition</h2>
<p>提出了首个基于视觉语言大模型的视频异常识别任务，输入弱监督任务，输入为样本以及样本对应的类别（包括了异常的种类）。文章发现利用传统的Clip直接进行任务并不能取得较好的结果，因此提出了一个选择器模型以调整clip空间中的特征。另外，提出了一个基于transformer的时序模型。最终训练的要求为最大化异常与正常的特征。选择器模型(a)：文章利用均值构造了一个原型，文章认为特征与原型的距离大小反映了其异常性的可能性，而其方向则表示异常的类型。<br>
<img src="https://zyf-815.github.io/post-images/1737273653242.png" alt="" loading="lazy"></p>
<h2 id="cross-modal-fusion-and-attention-mechanism-for-weakly-supervised-video-anomaly-detection">Cross-Modal Fusion and Attention Mechanism for Weakly Supervised Video Anomaly Detection</h2>
<p>利用音频与视频两种模态实现弱监督视频异常检测。主要解决如何融合音频与视频两种模态。在注意力机制的K，V前加入可学习的前缀来自适应的学习模态融合。</p>
<h1 id="其他方式论文">其他方式论文：</h1>
<h2 id="towards-interpretable-video-anomaly-detection">Towards Interpretable Video Anomaly Detection</h2>
<p>过去的方法不可解释且依赖于人工筛选的数据（要求训练集没有异常），因此文章利用了两个辅助任务的预训练模型，提出了全局对象监测和局部对象监测两个模型</p>
<ul>
<li>Global：训练一个场景图模型，训练出对象和对象之间的关系最后输出与标准的语义距离</li>
<li>Local：利用姿态估计模型提取姿态，通过重建姿态返回重建损失<br>
<img src="https://zyf-815.github.io/post-images/1737277917838.png" alt="" loading="lazy"></li>
</ul>
<h2 id="harnessing-large-language-models-for-training-free-video-anomaly-detection">Harnessing Large Language Models for Training-free Video Anomaly Detection</h2>
<p>主要思想：利用大语言模型实现Training-free的视频异常检测，工作流程：由字幕模型为每一帧生成字幕，然后利用图像文本对齐处理不正确的字幕，然后由LLM通过时间窗口处理字幕序列得到摘要和初始异常分数，最后结合摘要和图像细化异常分数<br>
<img src="https://zyf-815.github.io/post-images/1737279017890.png" alt="" loading="lazy"></p>
<h2 id="attribute-based-representations-for-accurate-and-interpretable-video-anomaly-detection">Attribute-based Representations for Accurate and Interpretable Video Anomaly Detection</h2>
<p>通过速度、姿态估计以及深度特征进行异常检测，增强可解释性</p>
<h1 id="异常检测评价指标auc">异常检测评价指标——AUC</h1>
<h2 id="混淆矩阵">混淆矩阵</h2>
<ul>
<li>TP(True Positive)：样本预测值与真实值相符且均为正（正确的分类为阳性），即真阳性</li>
<li>FP(False Positive)：样本预测值为正而真实值为负（错误的分类为阳性），即假阳性</li>
<li>FN(False Negative)：样本预测值为负而真实值为正（错误的分类为阴性），即假阴性</li>
<li>TN(True Negative)：样本预测值与真实值相符且均为负（正确的分类为阴性），即真阴性</li>
</ul>
<p>精确率 ： (TP+TN) / (TP + TN +FN + FP)<br>
准确率 ： TP / (TP + FP) 在识别为正样本中，有多少为正样本<br>
召回率 ： TP / (TP + FN) 在实际的正样本中，有多少被正确的检测<br>
F-score ：准确率和召回率的平衡</p>
<h2 id="roc曲线与auc">ROC曲线与AUC</h2>
<p>横纵坐标分别为FPR和TPR。</p>
<ul>
<li>FPR = FP / (FP + TN)  负样本分错的概率</li>
<li>TPR = FP / (FP + TN)  正样本分对的概率<br>
ROC曲线即调整分类的阈值，绘制FPR和TPR的曲线。AUC为ROC曲线下的面积。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VIT相关论文]]></title>
        <id>https://zyf-815.github.io/post/sam-xiang-guan-lun-wen/</id>
        <link href="https://zyf-815.github.io/post/sam-xiang-guan-lun-wen/">
        </link>
        <updated>2025-01-17T02:58:13.000Z</updated>
        <content type="html"><![CDATA[<p>打算利用event模态以及SAM实现伪装物体检测，即利用event实现伪装物体定位作为SAM的prompt实现伪装物体检测，但由于仿真的event质量太低无法实现有效的检测导致任务失败。</p>
<h1 id="vit-backbone-相关论文">VIT backbone 相关论文</h1>
<h2 id="dynamicvit-efficient-vision-transformers-with-dynamic-token-sparsification">DynamicViT: Efficient Vision Transformers with Dynamic Token Sparsification</h2>
<p>本文发现只有少部分token会影响模型结果，因此剔除部分token不会影响模型性能反而还会增强模型的运算效率。在我的任务中，由于event的空间稀疏性，过多的token可能还会影响模型性能。本文主要提出了一个预测模块来检测token的重要性。</p>
<ul>
<li>预测token重要性：</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>z</mi><mrow><mi>l</mi><mi>o</mi><mi>c</mi><mi>a</mi><mi>l</mi></mrow></msup><mo>=</mo><mi>M</mi><mi>L</mi><mi>P</mi><mo>(</mo><mi>x</mi><mo>)</mo><mspace linebreak="newline"></mspace><msup><mi>z</mi><mrow><mi>g</mi><mi>l</mi><mi>o</mi><mi>b</mi><mi>a</mi><mi>l</mi></mrow></msup><mo>=</mo><mi>A</mi><mi>g</mi><mi>g</mi><mo>(</mo><mi>M</mi><mi>L</mi><mi>P</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo separator="true">,</mo><mover accent="true"><mi>D</mi><mo>^</mo></mover><mo>)</mo><mspace linebreak="newline"></mspace><msub><mi>z</mi><mi>i</mi></msub><mo>=</mo><mo>[</mo><msubsup><mi>z</mi><mi>i</mi><mrow><mi>l</mi><mi>o</mi><mi>c</mi><mi>a</mi><mi>l</mi></mrow></msubsup><mo separator="true">,</mo><msup><mi>z</mi><mrow><mi>g</mi><mi>l</mi><mi>o</mi><mi>b</mi><mi>a</mi><mi>l</mi></mrow></msup><mo>]</mo><mspace linebreak="newline"></mspace><mi>π</mi><mo>=</mo><mi>S</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mo>(</mo><mi>M</mi><mi>L</mi><mi>P</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>)</mo><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">z^{local} = MLP(x) \\
z^{global} = Agg(MLP(x),\hat{D}) \\
z_i = [z_{i}^{local} , z^{global}] \\
\pi = Softmax(MLP(z)) \\
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999998em;"><span style="top:-2.4530000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span></span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mclose">)</span></span><span class="mspace newline"></span></span></span></span></p>
<ul>
<li>训练阶段为了解决token预测可微，模型选择了Gumbel-Softmax。除此之外，剔除token后token数量发生了变化，不能简单的删除，也不能简单的置为0（因为同样会参与计算）。因此模型提出了一种掩码策略：具体来说通过G矩阵判断当前token是否与其他token计算注意力（当前token始终与自身计算注意力）。</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mi>Q</mi><msup><mi>K</mi><mi>T</mi></msup><mi mathvariant="normal">/</mi><msqrt><mi>C</mi></msqrt><mspace linebreak="newline"></mspace><msub><mi>G</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo>=</mo><mi>j</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>D</mi><mi>j</mi></msub><mo separator="true">,</mo><mi>i</mi><mi mathvariant="normal">≠</mi><mi>j</mi></mrow></mstyle></mtd></mtr></mtable></mrow><mspace linebreak="newline"></mspace><msub><mi>A</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo>(</mo><msub><mi>P</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>)</mo><msub><mi>G</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mi>e</mi><mi>x</mi><mi>p</mi><mo>(</mo><msub><mi>P</mi><mrow><mi>i</mi><mi>k</mi></mrow></msub><mo>)</mo><msub><mi>G</mi><mrow><mi>i</mi><mi>k</mi></mrow></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">P = QK^T / \sqrt{C} \\
G_{ij} = \left\{
\begin{matrix}
 1, i=j \\
 D_j, i \neq j \\ 
\end{matrix}
\right. \\
A_{ij} = \frac{exp(P_{ij})G_{ij}}{\sum _{k=1}^{N}exp(P_{ik})G_{ik}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.22554em;vertical-align:-0.25em;"></span><span class="mord mathdefault">Q</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9755400000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span><span style="top:-2.93554em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.06445999999999996em;"><span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.597941em;vertical-align:-1.170941em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.128769em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.170941em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<h2 id="dino-dinov2">Dino &amp; Dinov2</h2>
<p>Dino在计算机视觉领域设计了一种自监督的学习范式：无监督自蒸馏。通过裁剪等数据增强的方式获取同一图像的不同增强图像进行训练，并利用自蒸馏的方式要求学生模型向老师模型靠齐（通过学生模型学习局部或全局特征来对齐老师模型训练的全局特征，全局指裁剪面积大于整体面积的50%，局部指小于50%）。同时为了防止模式崩塌（不同输入导致相同结果），模型提出：1. 动量教师模型，学生模型通过反向传播更新参数，教师网络通过指数移动平均将学生网络学习到的模型参数更新给教师网络。2. 下图中的centering操作，为激活值添加一个偏置c，防止某一特征占主导地位。Dinov2提出了一个大规模的数据集，从大量未标注的数据中挑选了合适的数据，流程：1. 去重，计算不同图像的特征相似性，删除重复图像。2. 自监督图像检索，对图像特征进行聚类，然后从与查询图像所在的聚类中检索最相似的图像以获取与现有数据集相似的图像。<br>
<img src="https://zyf-815.github.io/post-images/1740990207952.png" alt="" loading="lazy"></p>
<h2 id="uniformerv2-unlocking-the-potential-of-image-vits-for-video-understanding">UniFormerV2: Unlocking the Potential of Image ViTs for Video Understanding</h2>
<p>视频专用模型可以更无缝地转移到视频领域，但它们的独特架构需要重新进行图像预训练，从而限制了可扩展性。本文改造UniFormer使其适应VIT，能够利用VIT的预训练模型。为了充分考虑时间信号，文章提出了一个局部时间聚合和一个全局时间聚合模块。其中局部聚合模块不考虑空间信号，只考虑时序上的token。而全局聚合模块利用一个可学习的token学习全局的时序信号。<br>
<img src="https://zyf-815.github.io/post-images/1737116464515.png" alt="" loading="lazy"><br>
文章还探索了四种多特征融合方式，最后消融实验发现第一种方式效果较好。<br>
<img src="https://zyf-815.github.io/post-images/1737116661466.png" alt="" loading="lazy"></p>
<h1 id="提示学习相关论文">提示学习相关论文</h1>
<h2 id="visual-prompt-tuning">Visual Prompt Tuning</h2>
<p>提出了两种提示学习的架构，deep和shallow<br>
<img src="https://zyf-815.github.io/post-images/1737173688187.png" alt="" loading="lazy"></p>
<h2 id="explicit-visual-prompting-for-low-level-structure-segmentations">Explicit visual prompting for low-level structure segmentations</h2>
<p>之前的提示学习方法都是数据无关的方法，本文主要见解是强制可调参数专注于每个单独图像的显式视觉内容（高频分量）<br>
<img src="https://zyf-815.github.io/post-images/1737174344995.png" alt="" loading="lazy"></p>
<h2 id="multi-prompt-with-depth-partitioned-cross-modal-learning">Multi-Prompt with Depth Partitioned Cross-Modal Learning</h2>
<p>比较了四种提示学习的方法</p>
<ul>
<li>(a)(b)都是基于单提示的方法，无法提示类的不同属性或其他有用的环境信息。</li>
<li>(c)由于不同提示没有明确的区分训练策略，导致模型容易简单的学习全局特征</li>
<li>(d)迫使每个不同的提示学习不同层的视觉表示<br>
<img src="https://zyf-815.github.io/post-images/1737185179017.png" alt="" loading="lazy"></li>
</ul>
<h2 id="maple-multi-modal-prompt-learning">MaPLe: Multi-modal Prompt Learning</h2>
<p>现有的提示学习都是单模态的提示学习，即在文本端添加可学习的提示词，但文章发现这种方式不足以实现最优的文本与图像的对齐，因此文章设计了一种多模态提示学习的方法以增强模态耦合。<br>
<img src="https://zyf-815.github.io/post-images/1737186372450.png" alt="" loading="lazy"></p>
<h2 id="vision-transformer-adapter-for-dense-predictions">Vision Transformer Adapter for Dense Predictions</h2>
<p>文章发现VIT在密集预测任务上的结果不好，过去的方法需要完全微调模型使VIT具备密集预测的能力，文章利用CNN设计了一个Adapter，充分获取了多尺度的特征并注入VIT中使模型具备密集预测的能力。<br>
<img src="https://zyf-815.github.io/post-images/1737186706236.png" alt="" loading="lazy"></p>
<h2 id="ez-clip-efficient-zeroshot-video-action-recognition">EZ-CLIP: Efficient Zeroshot Video Action Recognition</h2>
<p>过去的方法需要重新训练网络以获取时序捕捉的能力(left)，本文提出的方法利用可学习的token捕获时序变化(right)<br>
<img src="https://zyf-815.github.io/post-images/1737187373280.png" alt="" loading="lazy"></p>
<h1 id="detr相关论文">DETR相关论文</h1>
<p>DETR的优点是去除了人工设计如Anchors和nms，而一个缺点是学习很难收敛。DETR在检测过程中，通过100个可学习的tokens经过自注意力与交叉注意力得到100个候选，训练过程中通过根据匈牙利算法匹配GT中的物体。以下两篇论文介绍了DETR收敛慢的原因</p>
<h2 id="rethinking-transformer-based-set-prediction-for-object-detection">Rethinking Transformer-based Set Prediction for Object Detection</h2>
<p>归结的DETR收敛慢的原因</p>
<ul>
<li>在训练初期，模型的GT分配就是约等于随机分配的，这造成了早期训练时的不稳定性。但仅仅在前期加速了收敛。</li>
<li>cross-attention导致了收敛慢。由于 cross-attention 是 decoder 中object queries从encoder获取目标信息的关键模块，但由于训练过程中query不能提供准确的位置定位以至于不能准确的提取图像特征。</li>
</ul>
<p>因此文章提出了一个剔除cross attention的网络架构<br>
<img src="https://zyf-815.github.io/post-images/1737202786821.png" alt="" loading="lazy"></p>
<h2 id="dab-detr-dynamic-anchor-boxes-are-better-queries-for-detr">DAB-DETR: Dynamic Anchor Boxes are Better Queries for DETR</h2>
<p>详细介绍了Decoder中query的物理意义以及cross attention的作用</p>
<ol>
<li>类比encoder中的query，decoder中的query也包含两部分：0初始化的embedding提取图像特征，随机初始化的learnable queries提供位置信号。</li>
<li>主要原因在于learnable queries没有显式地提供位置先验，既不像Anchor，也没有位置编码。</li>
<li>因此，为了增强learnable queries的位置先验，对每个query引入x,y,w,h，使每个query负责不同的位置以及尺度。</li>
<li>为了防止模型过拟合训练集的物体位置分布，文章对于x,y均匀分布于图像中并取消了反向传播</li>
<li>基于Transformer的多层架构，模型在每一层后计算x,y,w,h的偏移量以更新位置信息。</li>
<li>由于query包含了位置信号，因此cross attention的作用就类似了ROI pooling，只不过这种query的方式能够增强网络对周围特征的参考。基于cross attention类似于ROI pooling的作用，论文调整了位置编码中的温度系数（降低），使模型更加关注特定位置的局部区域。<br>
<img src="https://zyf-815.github.io/post-images/1737203905691.png" alt="" loading="lazy"></li>
</ol>
<h1 id="sam相关论文">SAM相关论文</h1>
<h2 id="segment-anything">Segment Anything</h2>
<p>SAM的encoder为MAE训练的VIT，decoder的结构如下图所示：prompt包括稀疏（point box text）与稠密（mask）两种，点被表示为位置编码与学习到的特征的和；框由左上角和右下角两个点组成，mask通过卷积网络提取特征。<br>
<img src="https://zyf-815.github.io/post-images/1737166900887.png" alt="" loading="lazy"></p>
<h2 id="segment-anything-in-high-quality">Segment Anything in High Quality</h2>
<p>在部分区域SAM的分割质量不高（边缘细节错误，分割区域错误），文章通过与早期的encoder中的VIT特征进行交互，学习一个高质量的输出token以实现高质量的分割。优势：没有修改SAM的架构，只是在SAM的基础上添加了一个全新的output token以及一个特征融合模块。HQ-output token与SAM的output token拼接在一起，同样包含了掩码的信息。而特征融合模块融合了encoder中的浅层特征（边缘）、深层特征（语义），以及decoder中的更新过掩码特征。最终HQ-output token与融合后的HQ-feature一起得到高质量的掩码输出。<br>
<img src="https://zyf-815.github.io/post-images/1737168313898.png" alt="" loading="lazy"></p>
<h2 id="maris-referring-image-segmentation-via-mutual-aware-attention-features">MARIS: Referring Image Segmentation via Mutual-Aware Attention Features</h2>
<p>主要解决的问题：</p>
<ol>
<li>过去的方法仅考虑语言对视觉特征的引导，即通过语言增强视觉token中的相应的部分。忽略了视觉特征对语言特征的引导，通过视觉引导语言特征可以赋值不同的权重给表达式中的每个单词，并生成语言感知的视觉特征</li>
<li>过去的mask decoder中主要包含了大量的视觉特征，导致模型容易检测显著性区域而不是文本指定的区域，因此本文利用语言特征引导了模型的decoder部分<br>
<img src="https://zyf-815.github.io/post-images/1737171698032.png" alt="" loading="lazy"></li>
</ol>
<h2 id="geosam-fine-tuning-sam-with-sparse-and-dense-visual-prompting-for-automated-segmentation-of-mobility-infrastructure">GeoSAM: Fine-tuning SAM with Sparse and Dense Visual Prompting for Automated Segmentation of Mobility Infrastructure</h2>
<p>利用一个预训练的CNN网络为SAM分别生成稀疏掩码（区分前景与背景）与稠密掩码<br>
<img src="https://zyf-815.github.io/post-images/1737169825514.png" alt="" loading="lazy"></p>
<h2 id="sam-fails-to-segment-anything-sam-adapter-adapting-sam-in-underperformed-scenes-camouflage-shadow-and-more">SAM Fails to Segment Anything? -SAM-Adapter: Adapting SAM in Underperformed Scenes: Camouflage, Shadow, and More</h2>
<p>实验发现SAM在部分分割任务中的表现不佳，文章提出了一个Adapter，将特定的信息传入SAM的encoder中。特定的信号的可以是纹理、频域等。在代码中为频域特征<br>
<img src="https://zyf-815.github.io/post-images/1737167530054.png" alt="" loading="lazy"></p>
<h2 id="基于sam的视频分割segment-and-track-anything-和-track-anything-segment-anything-meets-videos">基于SAM的视频分割，Segment and Track Anything 和 Track Anything: Segment Anything Meets Videos</h2>
<p>将SAM作为组件应用于视频分割中，SAM主要提供一个准确的分割。</p>
<h2 id="self-prompting-large-vision-models-for-few-shot-medical-image-segmentation">Self-Prompting Large Vision Models for Few-Shot Medical Image Segmentation</h2>
<p>利用SAM的特征自我提示，即利用SAM的encoder特征生成粗掩码，然后根据粗掩码生成box与point的稀疏prompt作为decoder的prompt输入。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[伪装物体检测]]></title>
        <id>https://zyf-815.github.io/post/wei-zhuang-wu-ti-jian-ce/</id>
        <link href="https://zyf-815.github.io/post/wei-zhuang-wu-ti-jian-ce/">
        </link>
        <updated>2025-01-17T00:36:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="图片伪装物体检测">图片伪装物体检测</h1>
<p>Advances in Deep Concealed Scene Understanding介绍了伪装物体检测任务的发展脉络，文章总结了伪装物体检测总共有三种范式：</p>
<ul>
<li>多输入单输出的多流网络，一般可以将输入额外转化为深度、边缘、频域等，除此之外还可以放大缩小图片以显式的关注多尺度信息。</li>
<li>自底向上和自顶向下的多尺度网络，利用深层语义特征增强浅层特征</li>
<li>单输入多输出的分支网络，辅助任务通常可以选择边缘、深度等。<br>
<img src="https://zyf-815.github.io/post-images/1737075785348.png" alt="" loading="lazy"></li>
</ul>
<p>针对第一种范式，ZoomNeXt: A Unified Collaborative Pyramid Network for Camouflaged Object Detection在输入时候引入了0.5和1.5倍的分辨率输入，以实现不同尺度伪装物体的准确预测。主要流程为多分辨率特征提取——特征融合（包括了多分辨率输入特征的融合，以及多尺度特征的融合，主要利用了通道分组的技术，类似多头的设计）——结果预测。最后，文章提出了一个辅助的损失函数以增强边缘的锐利程度，即定义像素 x 的歧义度量，它在 x = 0.5 处最大化，并在 x = 0 或 x = 1 处最小化。</p>
<p>针对第二种范式，文章的出发点主要基于先大致定位伪装物体再实现了准确的分割，如论文FSNet: Focus Scanning Network for Camouflaged Object Detection和Concealed Object Detection 两篇论文均利用深层语义特征生成一个感兴趣区域或是Coarse Map，并以此辅助模型在解码器部分实现准确的分割。用到的一些技术包括：多尺度卷积核并行以实现尺度的自适应，通道的split。除此之外，<br>
Feature Shrinkage Pyramid for Camouflaged Object Detection with Transformers利用Transformer架构实现了伪装物体检测，主要解决了局部特征建模效果较差以及传统的特征聚合直接将底层特征与语义特征融合容易引入噪声。因此文章提出了一个token增强模块利用相邻的token增强token的局部表达能力并设计了金字塔结构的特征聚合模块逐步的聚合相邻token。</p>
<p>针对第三种范式，Camouflaged Object Detection with Feature Decomposition and Edge Reconstruction同时进行边缘检测与伪装物体检测以增强边缘恢复能力。除此之外，文章利用了小波变换将特征分为不同的频域，分别处理高频（边缘纹理）与低频信号（颜色光照）</p>
<h1 id="视频伪装物体检测">视频伪装物体检测</h1>
<h2 id="implicit-motion-handling-for-video-camouflaged-object-detection">Implicit Motion Handling for Video Camouflaged Object Detection</h2>
<p>过去的方法一般基于光流估计实现运动线索的建模，然而，在检测伪装对象时，对象边界往往是模糊的，视频中光流和运动线索的估计不准确，而这种不准确会影响影响性能进而导致误差的累积，因此文章隐式的学习运动线索。模型主要为两阶段的检测，第一阶段结合上下帧实现局部的时序感知，第二阶段实现长时序的建模。对于第一阶段的短时序建模，直接拼接上下帧的特征来实现特征位移的估计（共享了encoder）。对于第二阶段的长时序建模，网络参考了Transformer的seq-to-seq架构，利用注意力机制建模长时序。<br>
<img src="https://zyf-815.github.io/post-images/1737082071435.png" alt="" loading="lazy"><br>
<img src="https://zyf-815.github.io/post-images/1737082076808.png" alt="" loading="lazy"></p>
<h2 id="tokenmotion-motion-guided-vision-transformer-for-video-camouflaged-object-detection-via-learnable-token-selection">TokenMotion: Motion-Guided Vision Transformer for Video Camouflaged Object Detection Via Learnable Token Selection</h2>
<p>四页的短文，直接对比Implicit Motion Handling for Video Camouflaged Object Detection论文，指出其缺点。前文的解码器是独立的，因此上下文的分割噪声容易导致误差的累积，本文直接共享encoder和decoder；前文第二阶段的长时序可能导致不同场景的混合，过长的时序可能引入大量噪声，因此本文只利用上下文的时序信号。除此之外，文章提出了token选择模块来选择重要的token并忽略不重要的token(专注于运动变化)<br>
<img src="https://zyf-815.github.io/post-images/1737082670507.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[通道交换与归一化]]></title>
        <id>https://zyf-815.github.io/post/tong-dao-jiao-huan-yu-gui-yi-hua/</id>
        <link href="https://zyf-815.github.io/post/tong-dao-jiao-huan-yu-gui-yi-hua/">
        </link>
        <updated>2025-01-09T01:16:04.000Z</updated>
        <content type="html"><![CDATA[<p>一些多模态的mamba方法通常引入通道交换来融合两个模态的特征。具体来说，将每个模态的特征按通道对半分开然后拼接。但是对于模态不平衡问题，简单的交换可能导致主导模态的信息丢失。因此，调研了一些有关通道交换的方法</p>
<h1 id="deep-multimodal-fusion-by-channel-exchanging">Deep Multimodal Fusion by Channel Exchanging</h1>
<p>通过Batch-Normalization的尺度因子衡量通道的重要性。但是这种方式可能存在两种问题：</p>
<ol>
<li>Batch-Normalization依赖于batchsize，需要较大的batchsize才能取得较好的效果</li>
<li>这种通道融合方式要求不同模态的相同通道包含相似的特征，因此要求除了Batch-Normalization的网络共享。这会导致模型可能不能充分学习不同模态特有的特征<br>
<img src="https://zyf-815.github.io/post-images/1736388232571.png" alt="" loading="lazy"></li>
</ol>
<h1 id="generalized-lightness-adaptation-with-channel-selective-normalization">Generalized Lightness Adaptation with Channel Selective Normalization</h1>
<p>在归一化特征和非归一化特征之间进行通道的选择。归一化方法能够提取不变的特征表征（在本任务中能够得到光照不变的特征表达，增强模型在没见过的光照条件下的泛化性能）。但归一化方法会导致图片信息的损失。因此需要进行特征的选择。模型的目的即选择光照无关的通道进行特征归一化并替换原来的通道。<br>
<img src="https://zyf-815.github.io/post-images/1736389080861.png" alt="" loading="lazy"></p>
<h1 id="batch-normalization-和-layer-normalization">Batch-Normalization 和 Layer-Normalization</h1>
<p>归一化公式： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>x</mi><mo>^</mo></mover><mo>=</mo><mi>γ</mi><mo>⋅</mo><mfrac><mrow><mi>x</mi><mo>−</mo><mi>μ</mi></mrow><mi>δ</mi></mfrac><mo>+</mo><mi>β</mi></mrow><annotation encoding="application/x-tex">\hat{x} = \gamma \cdot \frac{x-\mu}{\delta} + \beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">^</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.63889em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.199439em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854439em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03785em;">δ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">μ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>，目的是为了使模型有效的训练，即使特征回到正态分布，适应激活函数的梯度。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>γ</mi><mo separator="true">,</mo><mi>β</mi></mrow><annotation encoding="application/x-tex">\gamma, \beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>为了重新学习得到数据的分布以更好的适应训练。</p>
<ul>
<li>Batch-Normalization一般用于视觉任务，不同样本对同一通道的特征进行归一化，使模型能够横向比较同一特征的差异。</li>
<li>Layer-Normalization一般用于自然语言任务，对同一样本不同特征进行比较，这是由于NLP任务不同样本间不需要比较，而同一样本内的不同特征存在上下文的因果关系。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mamba与线性注意力]]></title>
        <id>https://zyf-815.github.io/post/xian-xing-zhu-yi-li-yu-mamba/</id>
        <link href="https://zyf-815.github.io/post/xian-xing-zhu-yi-li-yu-mamba/">
        </link>
        <updated>2025-01-08T08:42:39.000Z</updated>
        <content type="html"><![CDATA[<h1 id="demystify-mamba-in-vision-a-linear-attention-perspective">Demystify Mamba in Vision: A Linear Attention Perspective</h1>
<p>文章对齐了线性注意力与Mamba的公式，发现Mamba和线性注意力的相似性，通过比较二者的不同得出Mamba超越线性注意力的原因。<br>
线性注意力取消了softmax函数，使其能够先计算KV进而将复杂度将为N：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mfrac><mrow><msub><mi>Q</mi><mi>i</mi></msub><msubsup><mi>K</mi><mi>j</mi><mi>T</mi></msubsup></mrow><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msub><mi>Q</mi><mi>i</mi></msub><msubsup><mi>K</mi><mi>j</mi><mi>T</mi></msubsup></mrow></mfrac><msub><mi>V</mi><mi>j</mi></msub><mo>=</mo><mfrac><mrow><msub><mi>Q</mi><mi>i</mi></msub><mo>(</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msubsup><mi>K</mi><mi>j</mi><mi>T</mi></msubsup><msub><mi>V</mi><mi>j</mi></msub><mo>)</mo></mrow><mrow><msub><mi>Q</mi><mi>i</mi></msub><mo>(</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msubsup><mi>K</mi><mi>j</mi><mi>T</mi></msubsup><mo>)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">y_i = \sum _{j=1}^{N} \frac{Q_iK_j^T}{\sum _{j=1}^N Q_i K_j^T}V_j = \frac{Q_i(\sum _{j=1}^{N}K_j^T V_j)}{Q_i (\sum _{j=1}^N K_j^T)}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2421130000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.626103em;"><span style="top:-2.128769em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.823131em;"><span style="top:-2.4231360000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4129719999999999em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.7847720000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3070490000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1140980000000003em;vertical-align:-1.3070490000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8070490000000001em;"><span style="top:-2.128769em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.823131em;"><span style="top:-2.4231360000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4129719999999999em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.825818em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3070490000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>将线性注意力由全局感受野写成自回归格式：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><mfrac><mrow><msub><mi>Q</mi><mi>i</mi></msub><mo>(</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></munderover><msubsup><mi>K</mi><mi>j</mi><mi>T</mi></msubsup><msub><mi>V</mi><mi>j</mi></msub><mo>)</mo></mrow><mrow><msub><mi>Q</mi><mi>i</mi></msub><mo>(</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></munderover><msubsup><mi>K</mi><mi>j</mi><mi>T</mi></msubsup><mo>)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><msub><mi>Q</mi><mi>i</mi></msub><msub><mi>S</mi><mi>i</mi></msub></mrow><mrow><msub><mi>Q</mi><mi>i</mi></msub><msub><mi>Z</mi><mi>i</mi></msub></mrow></mfrac><mo separator="true">,</mo><msub><mi>S</mi><mi>i</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></munderover><msubsup><mi>K</mi><mi>j</mi><mi>T</mi></msubsup><msub><mi>V</mi><mi>j</mi></msub><mo separator="true">,</mo><msub><mi>Z</mi><mi>i</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></munderover><msubsup><mi>K</mi><mi>j</mi><mi>T</mi></msubsup></mrow><annotation encoding="application/x-tex">y_i  = \frac{Q_i(\sum _{j=1}^{i}K_j^T V_j)}{Q_i (\sum _{j=1}^i K_j^T)} = \frac{Q_iS_i}{Q_iZ_i} , S_i = \sum _{j=1}^{i}K_j^T V_j , Z_i = \sum _{j=1}^i K_j^T
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0807640000000003em;vertical-align:-1.2903820000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7903820000000001em;"><span style="top:-2.145436em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.823131em;"><span style="top:-2.4231360000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4129719999999999em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.825818em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2903820000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.24077em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603299999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2254460000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8116690000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2254460000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8116690000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>最后改写为：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub><mo>=</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msubsup><mi>K</mi><mi>i</mi><mi>T</mi></msubsup><msub><mi>V</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>Z</mi><mi>i</mi></msub><mo>=</mo><msub><mi>Z</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msubsup><mi>K</mi><mi>i</mi><mi>T</mi></msubsup><mo separator="true">,</mo><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><msub><mi>Q</mi><mi>i</mi></msub><msub><mi>S</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>Q</mi><mi>i</mi></msub><msub><mi>Z</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i = S_{i-1} + K_i^T V_i , Z_i = Z_{i-1} + K_i^T , y_i = Q_iS_i/Q_iZ_i
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.138331em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.138331em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>Mamba和线性注意力的图形化表示为：<br>
<img src="https://zyf-815.github.io/post-images/1736413889320.png" alt="" loading="lazy"><br>
比较线性注意力与Mamba的区别：</p>
<ol>
<li>Mamba相比线性注意力乘以了一个Input Gate（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>前），意义为为当前输入乘了系数以确定当前输入的效用。</li>
<li>为前一时刻状态乘以了Forget Gate(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">h_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>前)，为模型提供了局部偏差与位置敏感的特点，即相对位置发生变化，衰减的次数也不同。遗忘门存在的问题：遗忘门迫使模型进行串行训练，虽然mamba通过硬件感知的方式实现了并行；除此之外遗忘门并不适用于视觉等非因果性任务，因此文中作者利用位置编码增强了线性注意力。</li>
<li>Mamba引入了残差连接</li>
<li>Mamba相比线性注意力缺少了归一化。归一化的目的主要是为了训练的稳定。如果没有归一化，可能导致模型对于长token序列能够学习全局特征，而短token序列只能关注于局部特征。</li>
<li>Mamba相比线性注意力缺少了多头的设计。多头注意力允许模型为不同的通道选择不同的注意力位置以增强模型的性能。</li>
<li>宏观设计<br>
<img src="https://zyf-815.github.io/post-images/1736415127274.png" alt="" loading="lazy"><br>
最终实验结果表明，Forget Gate与宏观设计对模型性能影响最大。<br>
接下来介绍宏观设计中Mamba的方法，即Gate Attention：Transformer Quality in Linear Time</li>
</ol>
<h1 id="transformer-quality-in-linear-time">Transformer Quality in Linear Time</h1>
<ul>
<li>提出了一个gated attention unit，该模块参考了Gated Linear Unit，由于门控机制的有效性能，允许模型选择更简单的注意力计算方法而不会造成性能下降。</li>
<li>提出了一种Mixed Chunk Attention，将token组合成一个个Chunk，每个Chunk内进行二次复杂度计算（即上文提出的gated attention unit），而Chunk之间应用线性注意力</li>
</ul>
<h2 id="gated-attention-unit">gated attention unit</h2>
<p><img src="https://zyf-815.github.io/post-images/1736492538936.png" alt="" loading="lazy"><br>
之前的工作发现将Transformer中的MLP层更换为Gated Linear Unit能够提供更好的结果，本文进一步的将MLP的Gated Linear Unit融合为一个模块，由于Gated Linear Unit模块的性能，提出的gated attention unit进一步简化了注意力的计算，实现了更低的复杂度。具体来说，将传统注意力中的softmax计算更改为了rule；取消了多头注意力的计算。不仅如此，在计算过程中降低了计算维度。</p>
<h2 id="mixed-chunk-attention">Mixed Chunk Attention</h2>
<figure data-type="image" tabindex="1"><img src="https://zyf-815.github.io/post-images/1736493157594.png" alt="" loading="lazy"></figure>
<h1 id="补充1介绍下线性注意力机制">补充1：介绍下线性注意力机制</h1>
<p>线性注意力中优先计算KV，计算结果称为State Space Model，维度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>×</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">d \times d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span>，其中d为维度。</p>
<ul>
<li>优势：降低了计算复杂度；适应自回归的预测，可以根据上一时刻的状态空间直接相加得到当前状态；而softmax注意力模型每次都需要重新计算QK的相似度矩阵，</li>
<li>劣势：softmax注意力保留了每一个 query 和历史上每一个生成的 token 之间的关系，使得信息与信息关系全部得到的完整的保留，而且softmax操作使模型能选择性的增强以及遗忘部分特征。而线性注意力模型每次通过相加的方式更新状态空间，无法单独抽取出token之间的相互关系。</li>
</ul>
<p>由此发现传统的线性注意力方法与RNN类似，无法有效建模长距离依赖关系，即当前语义关系与之间token之间的交互。因此有了LSTM，利用遗忘门确定单元状态需要丢弃什么，输入门确定当前状态如何影响单元状态，最后由单元状态与当前输入与上一时刻状态共同确定当前状态。</p>
<h1 id="补充2从ssm到mamba">补充2：从SSM到Mamba</h1>
<p>完全参考博客<a href="https://blog.csdn.net/v_JULY_v/article/details/134923301">一文通透想颠覆Transformer的Mamba</a>总结</p>
<ol>
<li>SSM核心公式以及离散化操作（零阶保持技术）<br>
<img src="https://zyf-815.github.io/post-images/1737036278983.png" alt="" loading="lazy"></li>
<li>对比RNN，SSM在训练与推理时采用两种不同的模式，使得模型能够并行训练加速（CNN）且在推理时充分利用上一时刻的结果（RNN）。<br>
<img src="https://zyf-815.github.io/post-images/1737036502742.png" alt="" loading="lazy"></li>
<li>SSM的方法与RNN类似，因此难以处理长距离依赖。因此需要设计合理的矩阵A以解决这一问题：Hippo矩阵——产生一个隐藏状态来记住其历史，因为Hippo矩阵在重建信号的时候正好满足近处保留完好而长距离存在一定退化<br>
<img src="https://zyf-815.github.io/post-images/1737037677478.png" alt="" loading="lazy"></li>
<li>SSM仍然存在的问题：A、B、C矩阵都是固定的，即无法针对输入做针对性的推理，如果要实现针对性的推理，也就无法实现并行的训练。</li>
<li>Mamba基于此提出了选择性处理机制，除此之外，Mamba为了实现并行计算提出了硬件感知的算法（并行扫描算法）并设计了更为简单的模型架构（将MLP模块融合注意力）</li>
<li>选择性处理机制：
<ul>
<li>transformer的注意力机制虽然有效果但效率不算很高，毕竟其需要显式地存储整个上下文，导致训练和推理消耗算力大</li>
<li>RNN的推理和训练效率高，但性能容易受到对上下文压缩程度的限制，将上下文全部压缩到一个固定大小的矩阵</li>
<li>SSM的问题在于其中的矩阵A B C不随输入不同而不同，即无法针对不同的输入针对性的推理</li>
<li>Mamba设计了一个简单的选择机制，通过“参数化SSM的输入”，让模型对信息有选择性处理，以便关注或忽略特定的输入：影响输入的B矩阵、影响状态的C矩阵的大小从原来的(D,N)(维度，矩阵A的维度)变成(B,L,N)（batch，length，矩阵A的维度），<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi></mrow><annotation encoding="application/x-tex">\Delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span></span></span></span>的大小由原来的D变成了(B,L,D)意味着对于一个 batch 里的每个token都有一个独特的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi></mrow><annotation encoding="application/x-tex">\Delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span></span></span></span>。因此，对于每一个token，都会生成不同的参数使模型能够选择性的处理不同的输入数据。较小的步长<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi></mrow><annotation encoding="application/x-tex">\Delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span></span></span></span>会忽略当前输入，而更多地使用先前的上文，而较大的步长<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi></mrow><annotation encoding="application/x-tex">\Delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span></span></span></span>会更多地关注当前输入而不是上文；修改B和C可以允许模型更精细地控制是否让输入x进入状态h，或状态h进入输出y；<br>
<img src="https://zyf-815.github.io/post-images/1737038791912.png" alt="" loading="lazy"></li>
</ul>
</li>
<li>其他细节：
<ul>
<li>为何要做线性投影：经过线性投影后，输入嵌入的维度可能会增加，以便让模型能够处理更高维度的特征空间，从而捕获更细致、更复杂的特征</li>
<li>为什么SSM前面有个卷积：SSM之前的CNN负责提取局部特征(因其擅长捕捉局部的短距离特征)，而SSM则负责处理这些特征并捕捉序列数据中的长期依赖关系，两者算互为补充</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[可变形注意力]]></title>
        <id>https://zyf-815.github.io/post/ke-bian-xing-zhu-yi-li/</id>
        <link href="https://zyf-815.github.io/post/ke-bian-xing-zhu-yi-li/">
        </link>
        <updated>2025-01-07T08:14:12.000Z</updated>
        <content type="html"><![CDATA[<p>Transformer的全局注意力机制提供的更大的感受野，取得了超越CNN的结果。但是全局注意力机制的计算导致了更大的内存消耗与计算复杂度，难以应用于高分辨特征，而且由于过大的感受野需要长时间的训练才能使模型准确关注到感兴趣的区域。一种方法是利用稀疏注意力的方式，如PVT，swin-Transformer。但是这些方式与数据无关，无法根据不同的样本得到不同的注意力区域，可能限制模型的长建模能力。另一种方式即可变形注意力。</p>
<h2 id="总结两种可变形注意力机制">总结两种可变形注意力机制</h2>
<p>在卷积神经网络中，为了自适应的学习不同的卷积核提出了可变形卷积，要计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mo>×</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">3\times 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>的卷积在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo>×</mo><mi>H</mi><mo>×</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">C \times H \times W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span></span>上，需要计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>9</mn><mi>C</mi><mi>H</mi><mi>W</mi></mrow><annotation encoding="application/x-tex">9CHW</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span></span>个参数。而在Transformer中需要计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mi>q</mi></msub><msub><mi>N</mi><mi>k</mi></msub><mi>C</mi></mrow><annotation encoding="application/x-tex">N_qN_kC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span>，为了减少计算复杂度，可以从query或key的角度出发，Deformable DETR: Deformable Transformers for End-to-End Object Detection从key出发，减少与query配对的key。但容易造成信息的丢失；Vision Transformer with Deformable Attention从query的角度出发，每个query都匹配相同的key，然后通过一个尺度因子缩小key，并利用offset选择合适位置。其本质上并没有显著减少复杂度（取决于尺度因子的选择）。<br>
复杂度分析：</p>
<ul>
<li>Deformable DETR: Deformable Transformers for End-to-End Object Detection ：K的取值一般为3，因此将二次复杂度将为了线性</li>
<li>Vision Transformer with Deformable Attention：和一般的注意力类似，只是除以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>r</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">r^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></li>
</ul>
<p>接下来具体介绍两种方法：</p>
<h2 id="deformable-detr-deformable-transformers-for-end-to-end-object-detection">Deformable DETR: Deformable Transformers for End-to-End Object Detection：</h2>
<p>为每个query分配固定数量的key，通过offset的学习得到key的位置<br>
<img src="https://zyf-815.github.io/post-images/1736322981221.png" alt="" loading="lazy"><br>
计算公式：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mi>e</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>A</mi><mi>t</mi><mi>t</mi><mi>n</mi><mo>(</mo><msub><mi>z</mi><mi>q</mi></msub><mo separator="true">,</mo><msub><mi>p</mi><mi>q</mi></msub><mo separator="true">,</mo><mi>x</mi><mo>)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>m</mi><mo>=</mo><mn>1</mn></mrow><mi>M</mi></munderover><msub><mi>W</mi><mi>m</mi></msub><mo>[</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>K</mi></munderover><msub><mi>A</mi><mrow><mi>m</mi><mi>q</mi><mi>k</mi></mrow></msub><mo>⋅</mo><msubsup><mi>W</mi><mi>m</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msubsup><mi>x</mi><mo>(</mo><msub><mi>p</mi><mi>q</mi></msub><mo>+</mo><mi mathvariant="normal">Δ</mi><msub><mi>p</mi><mrow><mi>m</mi><mi>q</mi><mi>k</mi></mrow></msub><mo>)</mo><mo>]</mo></mrow><annotation encoding="application/x-tex">DeformAttn(z_q , p_q , x) = \sum _{m=1}^MW_m [\sum _{k=1}^K A_{mqk} \cdot W_m^{&#x27;} x( p_q + \Delta p_{mqk})]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mord mathdefault">A</span><span class="mord mathdefault">t</span><span class="mord mathdefault">t</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1304490000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.882887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.267113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2785879999999998em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9924799999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></span></p>
<h2 id="vision-transformer-with-deformable-attention">Vision Transformer with Deformable Attention：</h2>
<p>不同的查询在视觉注意力模型中具有相似的注意力图，基于此，模型为不同的query分配相同的key。概括，key和value的空间尺度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mi>G</mi></msub><mo>×</mo><msub><mi>W</mi><mi>G</mi></msub></mrow><annotation encoding="application/x-tex">H_G \times W_G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，即每个query只与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mi>G</mi></msub><mo>×</mo><msub><mi>W</mi><mi>G</mi></msub></mrow><annotation encoding="application/x-tex">H_G \times W_G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>个key计算注意力，减少了key。而且所有的query共享key（通过group的方法可以为不同通道分配不同的key）<br>
<img src="https://zyf-815.github.io/post-images/1736320476961.png" alt="" loading="lazy"><br>
计算流程：</p>
<ol>
<li>生成参考点，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>∈</mo><msup><mi>R</mi><mrow><msub><mi>H</mi><mi>G</mi></msub><mo>×</mo><msub><mi>W</mi><mi>G</mi></msub><mo>×</mo><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">p\in R^{H_G \times W_G \times 2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.08125em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span><span class="mbin mtight">×</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></li>
<li>由feature map 生成query</li>
<li>由query生成offset</li>
<li>offset和参考点网格通过插值实现带查询的key<br>
结合代码：</li>
</ol>
<pre><code># 计算query
q = self.proj_q(x)   
# 计算offset
q_off = einops.rearrange(q, 'b (g c) h w -&gt; (b g) c h w', g=self.n_groups, c=self.n_group_channels)
offset = self.conv_offset(q_off).contiguous()  # B * g 2 Hg Wg

Hk, Wk = offset.size(2), offset.size(3)
n_sample = Hk * Wk
#归一化offset，并防止过大的偏移
if self.offset_range_factor &gt;= 0 and not self.no_off:
    offset_range = torch.tensor([1.0 / (Hk - 1.0), 1.0 / (Wk - 1.0)], device=device).reshape(1, 2, 1, 1)
    offset = offset.tanh().mul(offset_range).mul(self.offset_range_factor)
#生成参考点
reference = self._get_ref_points(Hk, Wk, B, dtype, device)
#计算偏移后的位置，并插值得到key：x_sampled
if self.offset_range_factor &gt;= 0:
    pos = offset + reference
else:
    pos = (offset + reference).clamp(-1., +1.)
if self.no_off:
    x_sampled = F.avg_pool2d(x, kernel_size=self.stride, stride=self.stride)
    assert x_sampled.size(2) == Hk and x_sampled.size(3) == Wk, f&quot;Size is {x_sampled.size()}&quot;
else:
    x_sampled = F.grid_sample(
    input=x.reshape(B * self.n_groups, self.n_group_channels, H, W), 
        grid=pos[..., (1, 0)], # y, x -&gt; x, y
        mode='bilinear', align_corners=True) # B * g, Cg, Hg, Wg
x_sampled = x_sampled.reshape(B, C, 1, n_sample)
# 后续计算注意力，以及相对位置的引入（略）
</code></pre>
]]></content>
    </entry>
</feed>